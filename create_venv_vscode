âœ… 1. Create a Virtual Environment
Open VS Code terminal (Ctrl + ~) and run:

bash
Copy
Edit
python3 -m venv venv_name
Example:

bash
Copy
Edit
python3 -m venv myenv
This creates a folder named myenv with all your virtual environment files.

âœ… 2. Activate the Virtual Environment
In the terminal, activate it using:

bash
Copy
Edit
source myenv/bin/activate
Youâ€™ll now see your prompt change like this:

bash
Copy
Edit
(myenv) user@machine:~/your/project$
âœ… 3. Check Youâ€™re Inside the Virtual Environment
Run:

bash
Copy
Edit
which python
It should point to something like:

bash
Copy
Edit
/home/user/project/myenv/bin/python
Also try:

bash
Copy
Edit
python -V
This confirms the Python version used inside the virtual environment.

âœ… 4. Deactivate the Environment
To exit the virtual environment, simply run:

bash
Copy
Edit
deactivate
Your prompt will no longer have (myenv).

âœ… 5. Re-enter the Same Virtual Environment Later
Just re-run:

bash
Copy
Edit
source myenv/bin/activate
And you're back in.

âœ… 6. Verify Youâ€™re in the Same Environment
After re-entering:

Check the prompt ((myenv) should appear)

Run:

bash
Copy
Edit
which python
â†’ It should still point to .../myenv/bin/python

You can also list installed packages:

bash
Copy
Edit
pip list
ðŸ“Œ VS Code Python Interpreter Setup
To ensure VS Code uses your environment:

Press Ctrl + Shift + P

Type: Python: Select Interpreter

Choose the one pointing to your myenv (.../myenv/bin/python)


--------




âœ… 1. Check Installed Libraries
Make sure you're inside the activated virtual environment, then run:

bash
Copy
Edit
pip list
This shows all installed packages and their versions.

To see more detail (like dependencies and source):

bash
Copy
Edit
pip show <package-name>
Example:

bash
Copy
Edit
pip show numpy
âœ… 2. Install a New Dependency
Still inside your virtual environment:

bash
Copy
Edit
pip install <package-name>
Example:

bash
Copy
Edit
pip install pandas
To install a specific version:

bash
Copy
Edit
pip install pandas==2.2.2
âœ… 3. Freeze Dependencies to a File
To create a list of all currently installed libraries (useful for sharing or deployment):

bash
Copy
Edit
pip freeze > requirements.txt
Example output in requirements.txt:

ini
Copy
Edit
pandas==2.2.2
numpy==1.26.4
âœ… 4. Install from requirements.txt
To install dependencies from a file:

bash
Copy
Edit
pip install -r requirements.txt
âœ… 5. Uninstall a Package
bash
Copy
Edit
pip uninstall <package-name>
Example:

bash
Copy
Edit
pip uninstall pandas
âœ… 6. Upgrade a Package
bash
Copy
Edit
pip install --upgrade <package-name>
Example:

bash
Copy
Edit
pip install --upgrade pip
âœ… 7. Search for a Package
bash
Copy
Edit
pip search <keyword>
Note: As of 2023+, this may not work due to PyPI's deprecation of the legacy search API. Use https://pypi.org instead.

âœ… Bonus: Useful PIP Commands Recap
Command	Description
pip list	List installed packages
pip install <pkg>	Install a package
pip uninstall <pkg>	Remove a package
pip freeze > requirements.txt	Save current packages to file
pip install -r requirements.txt	Install from a list
pip show <pkg>	Show package details
pip install <pkg>==<version>	Install a specific version
pip install --upgrade <pkg>	Upgrade a package
